

interface ParameterDeclaration {
  readonly name: string
  readonly description: string
}

interface Parameter extends ParameterDeclaration {
  readonly value: string
}


interface ViewFactory<V extends View> {
   views<R extends View>(ctx: V) : R[]
}
interface ViewFactories {
  project?: ViewFactory<Project>
  directory?: ViewFactory<Directory>
  file?: ViewFactory<File>
}

interface OperationDeclaration {
  readonly name: string
  readonly description: string
  readonly parameters: ParameterDeclaration[]
  readonly factories: ViewFactories
}

interface Extension{
  readonly name: string
  readonly description: string
  readonly operations: OperationDeclaration[]//declare ahead of time what operations are available on the views returned by below
}

interface TreeLike {
  nodeType: string[]
  nodeName: string
  childNodeNames: string[]
  childrenNamed(fieldName: string): View[]
}

//view types that should be in Core.ts
interface View {
}

class Project implements View{

}
class Directory implements View{

}

class FileView implements View {

}
//end view types

class ClojureView implements View {
  renamePackage(oldPackage: string, newPackage: string) : void {

  }
}

let clojureProjectViewFactory: ViewFactory<Project> = {
  views(project: Project) : ClojureView[] {
    return []
  }
}


let clojureProject: Extension = {
  name: "ClojureProject",
  description: "Perform operations on a Clojure Project",
  operations: [{
      name: "renamePackage",
      description: "Renames a package in a Clojure project",
      factories: {
        project: clojureProjectViewFactory
      },
      parameters: [{
        name: "oldPackage",
        description: "The old package name",
      },{
        name: "newPackage",
        description: "The new package name"
      }
    ]
  }
]}
